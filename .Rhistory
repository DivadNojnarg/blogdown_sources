`<i class='fa fa-line-chart'></i>` = "line",
`<i class='fa fa-pie-chart'></i>` = "pie"),
justified = TRUE),
smNavDropdown("Distribution",
smRadio("dist", "norm", "Normal", selected = TRUE),
switchInput("test4", "Test4"),
smRadio("dist", "lnorm", "Lognormal"),
smRadio("dist", "unif", "Uniform")
),
smQuickDropdown("qd2Test", parent = "navbar", "Quick Dropdown", c("Action 1", "Action 2", "Action 3"))
),
smDropdown(actionLink("ddTest", "Dropdown"),
smHeader("Action Elements"),
smAction("action1", "Action"),
smAction("action2", "Another Action"),
smDivider(),
smHeader("Checkbox Elements"),
smCheckbox("testCB", "cb1", "First Checkbox"),
smCheckbox("testCB", "cb2", "Second Checkbox"),
smCheckbox("testCB", "cb3", "Third Checkbox", selected = TRUE),
smDivider(),
smHeader("More Checkboxes"),
smCheckbox("testCB2", "cb21", "First Checkbox", selected = TRUE),
smCheckbox("testCB2", "cb22", "Second Checkbox", selected = TRUE),
smCheckbox("testCB2", "cb23", "Third Checkbox"),
smDivider(),
smHeader("Radio Elements"),
smRadio("testRB", "rb1", "First Radio"),
smRadio("testRB", "rb2", "Second Radio", selected = TRUE),
smRadio("testRB", "rb3", "Third Radio", selected = TRUE)
),
smQuickDropdown("qdTest", "Quick Dropdown", c("Action 1", "Action 2", "Action 3")),
plotOutput("testPlot"),
smContextMenu("context1", "testPlot",
smRadio("dist", "norm", "Normal", selected = TRUE),
smRadio("dist", "lnorm", "Lognormal"),
smRadio("dist", "unif", "Uniform")
)
),
server =
function(input, output, session) {
observeEvent(input$testCB2, ({print(input$testCB2)}))
observeEvent(input$testRB, ({print(input$testRB)}))
observeEvent(input$qdTest, ({print(input$qdTest)}))
observeEvent(input[["Action 1"]], ({print(input[["Action 1"]])}))
output$testPlot <- renderPlot({
dist <- switch(input$dist,
norm = rnorm,
lnorm = rlnorm,
unif = runif
)
plot(dist(input$n))
})
}
)
runApp(app)
library(shiny)
library(shinyBS)
library(shinyMenus)
app <- shinyApp(
ui =
fluidPage(
smNavBar("testMenu", "shinyMB", full.width = TRUE, fixed = FALSE,
actionLink("testLink", "Link"),
actionLink("testLink2", "Link #2"),
textInput("n", "Sample Size", value = 1000),
switchInput("test", "Test"),
materialSwitch("test2", "Test2"),
actionBttn(inputId = "Id082", label = NULL,
style = "material-circle",
color = "danger", icon = icon("bars")),
sliderTextInput(inputId = "Id079",
label = "Restricted choices:",
choices = LETTERS, selected = "A",
from_min = "E", from_max = "T"),
radioGroupButtons(inputId = "Id048",
label = "Choose a graph :",
choices = c(`<i class='fa fa-bar-chart'></i>` = "bar",
`<i class='fa fa-line-chart'></i>` = "line",
`<i class='fa fa-pie-chart'></i>` = "pie"),
justified = TRUE,
size = "xs",
width = "100%"),
smNavDropdown("Distribution",
smRadio("dist", "norm", "Normal", selected = TRUE),
switchInput("test4", "Test4"),
smRadio("dist", "lnorm", "Lognormal"),
smRadio("dist", "unif", "Uniform")
),
smQuickDropdown("qd2Test", parent = "navbar", "Quick Dropdown", c("Action 1", "Action 2", "Action 3"))
),
smDropdown(actionLink("ddTest", "Dropdown"),
smHeader("Action Elements"),
smAction("action1", "Action"),
smAction("action2", "Another Action"),
smDivider(),
smHeader("Checkbox Elements"),
smCheckbox("testCB", "cb1", "First Checkbox"),
smCheckbox("testCB", "cb2", "Second Checkbox"),
smCheckbox("testCB", "cb3", "Third Checkbox", selected = TRUE),
smDivider(),
smHeader("More Checkboxes"),
smCheckbox("testCB2", "cb21", "First Checkbox", selected = TRUE),
smCheckbox("testCB2", "cb22", "Second Checkbox", selected = TRUE),
smCheckbox("testCB2", "cb23", "Third Checkbox"),
smDivider(),
smHeader("Radio Elements"),
smRadio("testRB", "rb1", "First Radio"),
smRadio("testRB", "rb2", "Second Radio", selected = TRUE),
smRadio("testRB", "rb3", "Third Radio", selected = TRUE)
),
smQuickDropdown("qdTest", "Quick Dropdown", c("Action 1", "Action 2", "Action 3")),
plotOutput("testPlot"),
smContextMenu("context1", "testPlot",
smRadio("dist", "norm", "Normal", selected = TRUE),
smRadio("dist", "lnorm", "Lognormal"),
smRadio("dist", "unif", "Uniform")
)
),
server =
function(input, output, session) {
observeEvent(input$testCB2, ({print(input$testCB2)}))
observeEvent(input$testRB, ({print(input$testRB)}))
observeEvent(input$qdTest, ({print(input$qdTest)}))
observeEvent(input[["Action 1"]], ({print(input[["Action 1"]])}))
output$testPlot <- renderPlot({
dist <- switch(input$dist,
norm = rnorm,
lnorm = rlnorm,
unif = runif
)
plot(dist(input$n))
})
}
)
runApp(app)
library(shiny)
library(shinyBS)
library(shinyMenus)
app <- shinyApp(
ui =
fluidPage(
smNavBar("testMenu", "shinyMB", full.width = TRUE, fixed = FALSE,
actionLink("testLink", "Link"),
actionLink("testLink2", "Link #2"),
textInput("n", "Sample Size", value = 1000),
switchInput("test", "Test"),
materialSwitch("test2", "Test2"),
actionBttn(inputId = "Id082", label = NULL,
style = "material-circle",
color = "danger", icon = icon("bars")),
sliderTextInput(inputId = "Id079",
label = "Restricted choices:",
choices = LETTERS, selected = "A",
from_min = "E", from_max = "T"),
radioGroupButtons(inputId = "Id048",
label = "Choose a graph :",
choices = c(`<i class='fa fa-bar-chart'></i>` = "bar",
`<i class='fa fa-line-chart'></i>` = "line",
`<i class='fa fa-pie-chart'></i>` = "pie"),
justified = TRUE,
size = "xs",
width = "10%"),
smNavDropdown("Distribution",
smRadio("dist", "norm", "Normal", selected = TRUE),
switchInput("test4", "Test4"),
smRadio("dist", "lnorm", "Lognormal"),
smRadio("dist", "unif", "Uniform")
),
smQuickDropdown("qd2Test", parent = "navbar", "Quick Dropdown", c("Action 1", "Action 2", "Action 3"))
),
smDropdown(actionLink("ddTest", "Dropdown"),
smHeader("Action Elements"),
smAction("action1", "Action"),
smAction("action2", "Another Action"),
smDivider(),
smHeader("Checkbox Elements"),
smCheckbox("testCB", "cb1", "First Checkbox"),
smCheckbox("testCB", "cb2", "Second Checkbox"),
smCheckbox("testCB", "cb3", "Third Checkbox", selected = TRUE),
smDivider(),
smHeader("More Checkboxes"),
smCheckbox("testCB2", "cb21", "First Checkbox", selected = TRUE),
smCheckbox("testCB2", "cb22", "Second Checkbox", selected = TRUE),
smCheckbox("testCB2", "cb23", "Third Checkbox"),
smDivider(),
smHeader("Radio Elements"),
smRadio("testRB", "rb1", "First Radio"),
smRadio("testRB", "rb2", "Second Radio", selected = TRUE),
smRadio("testRB", "rb3", "Third Radio", selected = TRUE)
),
smQuickDropdown("qdTest", "Quick Dropdown", c("Action 1", "Action 2", "Action 3")),
plotOutput("testPlot"),
smContextMenu("context1", "testPlot",
smRadio("dist", "norm", "Normal", selected = TRUE),
smRadio("dist", "lnorm", "Lognormal"),
smRadio("dist", "unif", "Uniform")
)
),
server =
function(input, output, session) {
observeEvent(input$testCB2, ({print(input$testCB2)}))
observeEvent(input$testRB, ({print(input$testRB)}))
observeEvent(input$qdTest, ({print(input$qdTest)}))
observeEvent(input[["Action 1"]], ({print(input[["Action 1"]])}))
output$testPlot <- renderPlot({
dist <- switch(input$dist,
norm = rnorm,
lnorm = rlnorm,
unif = runif
)
plot(dist(input$n))
})
}
)
runApp(app)
shinyWidgetsGallery()
library(shiny)
library(shinyBS)
library(shinyMenus)
app <- shinyApp(
ui =
fluidPage(
smNavBar("testMenu", "shinyMB", full.width = TRUE, fixed = FALSE,
actionLink("testLink", "Link"),
actionLink("testLink2", "Link #2"),
textInput("n", "Sample Size", value = 1000),
switchInput("test", "Test"),
materialSwitch("test2", "Test2"),
actionBttn(inputId = "Id082", label = NULL,
style = "material-circle",
color = "danger", icon = icon("bars")),
sliderTextInput(inputId = "Id079",
label = "Restricted choices:",
choices = LETTERS, selected = "A",
from_min = "E", from_max = "T"),
pickerInput(inputId = "Id071",
label = "Glyphicon", choices = c("glyphicon-cog",
"glyphicon-play", "glyphicon-ok-sign",
"glyphicon-arrow-right",
"glyphicon-euro", "glyphicon-music"),
choicesOpt = list(icon = c("glyphicon-cog",
"glyphicon-play", "glyphicon-ok-sign",
"glyphicon-arrow-right",
"glyphicon-euro", "glyphicon-music"))),
smNavDropdown("Distribution",
smRadio("dist", "norm", "Normal", selected = TRUE),
switchInput("test4", "Test4"),
smRadio("dist", "lnorm", "Lognormal"),
smRadio("dist", "unif", "Uniform")
),
smQuickDropdown("qd2Test", parent = "navbar", "Quick Dropdown", c("Action 1", "Action 2", "Action 3"))
),
smDropdown(actionLink("ddTest", "Dropdown"),
smHeader("Action Elements"),
smAction("action1", "Action"),
smAction("action2", "Another Action"),
smDivider(),
smHeader("Checkbox Elements"),
smCheckbox("testCB", "cb1", "First Checkbox"),
smCheckbox("testCB", "cb2", "Second Checkbox"),
smCheckbox("testCB", "cb3", "Third Checkbox", selected = TRUE),
smDivider(),
smHeader("More Checkboxes"),
smCheckbox("testCB2", "cb21", "First Checkbox", selected = TRUE),
smCheckbox("testCB2", "cb22", "Second Checkbox", selected = TRUE),
smCheckbox("testCB2", "cb23", "Third Checkbox"),
smDivider(),
smHeader("Radio Elements"),
smRadio("testRB", "rb1", "First Radio"),
smRadio("testRB", "rb2", "Second Radio", selected = TRUE),
smRadio("testRB", "rb3", "Third Radio", selected = TRUE)
),
smQuickDropdown("qdTest", "Quick Dropdown", c("Action 1", "Action 2", "Action 3")),
plotOutput("testPlot"),
smContextMenu("context1", "testPlot",
smRadio("dist", "norm", "Normal", selected = TRUE),
smRadio("dist", "lnorm", "Lognormal"),
smRadio("dist", "unif", "Uniform")
)
),
server =
function(input, output, session) {
observeEvent(input$testCB2, ({print(input$testCB2)}))
observeEvent(input$testRB, ({print(input$testRB)}))
observeEvent(input$qdTest, ({print(input$qdTest)}))
observeEvent(input[["Action 1"]], ({print(input[["Action 1"]])}))
output$testPlot <- renderPlot({
dist <- switch(input$dist,
norm = rnorm,
lnorm = rlnorm,
unif = runif
)
plot(dist(input$n))
})
}
)
runApp(app)
addinit:::initProject()
library(shinymaterial)
library(shiny)
library(shiny.semantic)
ui <- function() {
shinyUI(
semanticPage(
title = "Dropdown example",
uiOutput("dropdown"),
p("Selected letter:"),
textOutput("selected_letter")
)
)
}
server <- shinyServer(function(input, output) {
output$dropdown <- renderUI({
dropdown("simple_dropdown", LETTERS, value = "A")
})
output$selected_letter <- renderText(input[["simple_dropdown"]])
})
shinyApp(ui = ui(), server = server)
library(shiny)
library(shiny.semantic)
library(gapminder)
library(dplyr)
ui <- function() {
shinyUI(
semanticPage(
title = "Dropdown example",
uiOutput("search_countries"),
p("Selected countries:"),
textOutput("selected_countries")
)
)
}
server <- shinyServer(function(input, output, session) {
search_api <- function(gapminder, q){
has_matching <- function(field) {
startsWith(field, q)
}
gapminder %>%
mutate(country = as.character(country)) %>%
select(country) %>%
unique %>%
filter(has_matching(country)) %>%
head(5) %>%
transmute(name = country,
value = country)
}
search_api_url <- shiny.semantic::register_search(session, gapminder, search_api)
output$search_countries <- shiny::renderUI(search_selection_api("search_result", search_api_url, multiple = TRUE))
output$selected_countries <- renderText(input[["search_result"]])
})
shinyApp(ui = ui(), server = server)
library(shiny)
library(shiny.semantic)
ui <- function() {
shinyUI(
semanticPage(
title = "Dropdown example",
uiOutput("search_letters"),
p("Selected letter:"),
textOutput("selected_letters")
)
)
}
server <- shinyServer(function(input, output, session) {
choices <- LETTERS
search_api_url <- register_search(session, iris)
output$search_letters <- shiny::renderUI(search_selection_choices("search_result", choices, value = "A", multiple = TRUE))
output$selected_letters <- renderText(input[["search_result"]])
})
shinyApp(ui = ui(), server = server)
library(shiny)
library(shiny.semantic)
ui <- function() {
shinyUI(
semanticPage(
title = "Dropdown example",
uiOutput("dropdown"),
p("Selected letter:"),
textOutput("selected_letter")
)
)
}
server <- shinyServer(function(input, output) {
output$dropdown <- renderUI({
dropdown("simple_dropdown", LETTERS, value = "A")
})
output$selected_letter <- renderText(input[["simple_dropdown"]])
})
shinyApp(ui = ui(), server = server)
library(shiny)
library(shiny.semantic)
ui <- function() {
shinyUI(
semanticPage(
title = "Dropdown example",
uiOutput("dropdown"),
p("Selected letter:"),
textOutput("selected_letter"),
sliderInput("test", "Test")
)
)
}
server <- shinyServer(function(input, output) {
output$dropdown <- renderUI({
dropdown("simple_dropdown", LETTERS, value = "A")
})
output$selected_letter <- renderText(input[["simple_dropdown"]])
})
library(shiny)
library(shiny.semantic)
ui <- function() {
shinyUI(
semanticPage(
title = "Dropdown example",
uiOutput("dropdown"),
p("Selected letter:"),
textOutput("selected_letter"),
sliderInput("test", "Test")
)
)
}
server <- shinyServer(function(input, output) {
output$dropdown <- renderUI({
dropdown("simple_dropdown", LETTERS, value = "A")
})
output$selected_letter <- renderText(input[["simple_dropdown"]])
})
shinyApp(ui = ui(), server = server)
library(shiny)
library(shiny.semantic)
ui <- function() {
shinyUI(
semanticPage(
title = "Dropdown example",
uiOutput("dropdown"),
p("Selected letter:"),
textOutput("selected_letter"),
sliderInput("test", "Test", value = 5, min = 0, max = 10)
)
)
}
server <- shinyServer(function(input, output) {
output$dropdown <- renderUI({
dropdown("simple_dropdown", LETTERS, value = "A")
})
output$selected_letter <- renderText(input[["simple_dropdown"]])
})
shinyApp(ui = ui(), server = server)
library(shiny)
library(shiny.semantic)
ui <- function() {
shinyUI(
semanticPage(
title = "Dropdown example",
uiOutput("dropdown"),
p("Selected letter:"),
textOutput("selected_letter"),
sliderInput("test", "Test", value = 5, min = 0, max = 10),
div(class = "ui card", div(class = "content",
div(class = "right floated meta", "14h"),
img(class = "ui avatar image", src = "images/elliot.jpg"),
"Elliot"), div(class = "image", img(src = "images/wireframe.png")),
div(class = "content", span(class = "right floated",
uiicon("heart outline like"), "17 likes"),
uiicon("comment"), "3 comments"),
div(class = "extra content", div(class = "ui large transparent left icon input",
uiicon("heart ouline"), tags$input(type = "text",
placeholder = "Add Comment..."))))
)
)
}
server <- shinyServer(function(input, output) {
output$dropdown <- renderUI({
dropdown("simple_dropdown", LETTERS, value = "A")
})
output$selected_letter <- renderText(input[["simple_dropdown"]])
})
shinyApp(ui = ui(), server = server)
library(shiny)
library(shiny.semantic)
ui <- function() {
shinyUI(
semanticPage(
title = "Dropdown example",
uiOutput("dropdown"),
p("Selected letter:"),
textOutput("selected_letter"),
div(class = "ui card", div(class = "content",
div(class = "right floated meta", "14h"),
img(class = "ui avatar image", src = "images/elliot.jpg"),
"Elliot"), div(class = "image", img(src = "images/wireframe.png")),
sliderInput("test", "Test", value = 5, min = 0, max = 10),
div(class = "content", span(class = "right floated",
uiicon("heart outline like"), "17 likes"),
uiicon("comment"), "3 comments"),
div(class = "extra content", div(class = "ui large transparent left icon input",
uiicon("heart ouline"), tags$input(type = "text",
placeholder = "Add Comment..."))))
)
)
}
server <- shinyServer(function(input, output) {
output$dropdown <- renderUI({
dropdown("simple_dropdown", LETTERS, value = "A")
})
output$selected_letter <- renderText(input[["simple_dropdown"]])
})
shinyApp(ui = ui(), server = server)
blogdown::serve_site()
blogdown::build_site()
addinit:::initProject()
