saveData(formData())
})
# Show the previous responses
# (update with current response when Submit is clicked)
output$responses <- DT::renderDataTable({
input$submit
loadData()
})
}
)
library(shiny)
# Define the fields we want to save from the form
fields <- c("name", "used_shiny", "r_num_years")
saveData <- function(data) {
data <- as.data.frame(t(data))
if (exists("responses")) {
responses <<- rbind(responses, data)
} else {
responses <<- data
}
}
loadData <- function() {
if (exists("responses")) {
responses
}
}
# Shiny app with 3 fields that the user can submit data for
shinyApp(
ui = fluidPage(
DT::dataTableOutput("responses", width = 300), tags$hr(),
textInput("name", "Name", ""),
checkboxInput("used_shiny", "I've built a Shiny app in R before", FALSE),
sliderInput("r_num_years", "Number of years using R",
0, 25, 2, ticks = F),
actionButton("submit", "Submit")
),
server = function(input, output, session) {
# Whenever a field is filled, aggregate all form data
formData <- reactive({
data <- sapply(fields, function(x) input[[x]])
#data
})
# When the Submit button is clicked, save the form data
observeEvent(input$submit, {
saveData(formData())
})
# Show the previous responses
# (update with current response when Submit is clicked)
output$responses <- DT::renderDataTable({
input$submit
loadData()
})
}
)
install.packages(c("assertthat", "boot", "curl", "foreign", "formatR", "jsonlite", "lme4", "markdown", "MASS", "memoise", "plotly", "quantreg", "rmarkdown", "rpart", "scatterplot3d", "shiny", "sourcetools", "SparseM", "stringi", "survival", "zoo"))
install.packages(c("assertthat", "boot", "curl", "foreign", "formatR", "jsonlite", "lme4", "markdown", "MASS", "memoise", "plotly", "quantreg", "rmarkdown", "rpart", "scatterplot3d", "shiny", "sourcetools", "SparseM", "stringi", "survival", "zoo"))
install.packages(c("assertthat", "boot", "curl", "foreign", "formatR", "jsonlite", "lme4", "markdown", "MASS", "memoise", "plotly", "quantreg", "rmarkdown", "rpart", "scatterplot3d", "shiny", "sourcetools", "SparseM", "stringi", "survival", "zoo"))
install.packages(c("assertthat", "boot", "curl", "foreign", "formatR", "jsonlite", "lme4", "markdown", "MASS", "memoise", "plotly", "quantreg", "rmarkdown", "rpart", "scatterplot3d", "shiny", "sourcetools", "SparseM", "stringi", "survival", "zoo"))
install.packages(c("assertthat", "boot", "curl", "foreign", "formatR", "jsonlite", "lme4", "markdown", "MASS", "memoise", "plotly", "quantreg", "rmarkdown", "rpart", "scatterplot3d", "shiny", "sourcetools", "SparseM", "stringi", "survival", "zoo"))
install.packages(c("assertthat", "boot", "curl", "foreign", "formatR", "jsonlite", "lme4", "markdown", "MASS", "memoise", "plotly", "quantreg", "rmarkdown", "rpart", "scatterplot3d", "shiny", "sourcetools", "SparseM", "stringi", "survival", "zoo"))
install.packages(c("assertthat", "boot", "curl", "foreign", "formatR", "jsonlite", "lme4", "markdown", "MASS", "memoise", "plotly", "quantreg", "rmarkdown", "rpart", "scatterplot3d", "shiny", "sourcetools", "SparseM", "stringi", "survival", "zoo"))
install.packages(c("assertthat", "boot", "curl", "foreign", "formatR", "jsonlite", "lme4", "markdown", "MASS", "memoise", "plotly", "quantreg", "rmarkdown", "rpart", "scatterplot3d", "shiny", "sourcetools", "SparseM", "stringi", "survival", "zoo"))
install.packages(c("assertthat", "boot", "curl", "foreign", "formatR", "jsonlite", "lme4", "markdown", "MASS", "memoise", "plotly", "quantreg", "rmarkdown", "rpart", "scatterplot3d", "shiny", "sourcetools", "SparseM", "stringi", "survival", "zoo"))
install.packages(c("assertthat", "boot", "curl", "foreign", "formatR", "jsonlite", "lme4", "markdown", "MASS", "memoise", "plotly", "quantreg", "rmarkdown", "rpart", "scatterplot3d", "shiny", "sourcetools", "SparseM", "stringi", "survival", "zoo"))
install.packages(c("assertthat", "boot", "curl", "foreign", "formatR", "jsonlite", "lme4", "markdown", "MASS", "memoise", "plotly", "quantreg", "rmarkdown", "rpart", "scatterplot3d", "shiny", "sourcetools", "SparseM", "stringi", "survival", "zoo"))
shinyApp(ui, server)
library('shiny')
library('shinydashboard')
# Sidebar #############################
sidebar <- dashboardSidebar(
tags$head(
tags$script(
HTML(
"
$(document).ready(function(){
// Bind classes to menu items, easiet to fill in manually
var ids = ['subItemOne','subItemTwo','subItemThree','subItemFour'];
for(i=0; i<ids.length; i++){
$('a[data-value='+ids[i]+']').addClass('my_subitem_class');
}
// Register click handeler
$('.my_subitem_class').on('click',function(){
// Unactive menuSubItems
$('.my_subitem_class').parent().removeClass('active');
})
})
"
)
)
),
width = 290,
sidebarMenu(
menuItem('Menu One', tabName = 'menuOne', icon = icon('line-chart'),
collapsible =
menuSubItem('Sub-Item One', tabName = 'subItemOne'),
menuSubItem('Sub-Item Two', tabName = 'subItemTwo')
)
),
sidebarMenu(
menuItem('Menu Two', tabName = 'menuTwo', icon = icon('users'),
collapsible =
menuSubItem('Sub-Item Three', tabName = 'subItemThree'),
menuSubItem('Sub-Item Four', tabName = 'subItemFour')
)
)
)
# Body #############################
body <- dashboardBody(
tabItems(
tabItem(tabName = 'subItemOne',
h2('Selected Sub-Item One')
),
tabItem(tabName = 'subItemTwo',
h2('Selected Sub-Item Two')
),
tabItem(tabName = 'subItemThree',
h2('Selected Sub-Item Three')
),
tabItem(tabName = 'subItemFour',
h2('Selected Sub-Item Four')
)
)
)
# UI #############################
ui <- dashboardPage(
dashboardHeader(title = 'Test', titleWidth = 290),
sidebar,
body
)
# Server #############################
server <- function(input, output){
}
shinyApp(ui, server)
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
library(shiny)
shinyApp(
ui = fluidPage(
textInput("text", "text", ""),
selectInput("select", "select", 1:5),
uiOutput("ui"),
actionButton("save", "Save"),
actionButton("load", "Load")
),
server = function(input, output, session) {
output$ui <- renderUI({
tagList(
numericInput("num", "num", 7),
checkboxGroupInput("chk", "chk", 1:5, c(2,4))
)
})
observeEvent(input$save, {
values <<- lapply(reactiveValuesToList(input), unclass)
})
observeEvent(input$load, {
if (exists("values")) {
lapply(names(values),
function(x) session$sendInputMessage(x, list(value = values[[x]]))
)
}
})
}
)
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
install.packages("RSQLite")
source('Dropbox/Learn_Shiny_R/login_example.R')
output$pass <- renderText({
if(USER$Logged == FALSE) {
if(!is.null(input$Login)) {
if(input$Login > 0) {
Username <- isolate(input[[paste0('username', USER$Unique)]])
Password <- isolate(input[[paste0('password', USER$Unique)]])
Id.username <- which(PASSWORD$Username == Username)
if(length(Id.username) == 1 &
Password == PASSWORD[Id.username,]$Password) {
USER$Logged <- TRUE
USER$Username <- Username
} else  {
"Username or password failed!"
}
}
}
}
})
USER <- reactiveValues(Logged = Logged,
Unique = format(Sys.time(), '%Y%m%d%H%M%S'),
Username = NA)
passwdInput <- function(inputId, label, value) {
tagList(
tags$label(label),
tags$input(id=inputId, type="password", value=value)
)
}
output$uiLogin <- renderUI({
if(USER$Logged == FALSE) {
wellPanel(
div(textInput(paste0("username", USER$Unique), "Username: ", value='')),
div(passwdInput(paste0("password", USER$Unique), "Password: ", value='')),
br(), br(),
actionButton("Login", "Login")
)
}
})
output$uiLogout <- renderUI({
actionButton('logoutButton', 'Logout')
})
observeEvent(input$logoutButton, {
if(!is.null(input$logoutButton) & input$logoutButton == 1) {
USER$Logged <- FALSE
USER$Username <- NA
USER$Unique <- format(Sys.time(), '%Y%m%d%H%M%S')
}
})
output$pass <- renderText({
if(USER$Logged == FALSE) {
if(!is.null(input$Login)) {
if(input$Login > 0) {
Username <- isolate(input[[paste0('username', USER$Unique)]])
Password <- isolate(input[[paste0('password', USER$Unique)]])
Id.username <- which(PASSWORD$Username == Username)
if(length(Id.username) == 1 &
Password == PASSWORD[Id.username,]$Password) {
USER$Logged <- TRUE
USER$Username <- Username
} else  {
"Username or password failed!"
}
}
}
}
})
source('Dropbox/Learn_Shiny_R/login_example.R')
library(shiny); source('Dropbox/Learn_Shiny_R/login_example.R')
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
source('Dropbox/Learn_Shiny_R/login_example.R')
source('Dropbox/Learn_Shiny_R/login_example.R')
source('Dropbox/Learn_Shiny_R/login_example.R')
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
shiny::runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
shiny::runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
runApp('Dropbox/Learn_Shiny_R/App-1')
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
install.packages(c("Hmisc", "Matrix", "RcppEigen", "tidyr", "XML"))
R
install.packages("DiagrammeR")
install.packages("shinyAce")
install.packages("GGally")
install.packages("deTestset")
install.packages("deTestSet")
install.packages(c("devtools", "plotrix", "R6", "rsconnect"))
library(parallel)
no_cores <- detectCores() - 1
no_cores
cl <- makeCluster(no_cores)
cl
shiny::runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
data.frame(min=c(5,10,15),
max=c(20,30,50))
rownames(data.frame(min=c(5,10,15),
max=c(20,30,50))) = c("a","b","c")
rownames(data.frame(min=c(5,10,15),
max=c(20,30,50))) <- c("a","b","c")
test <- data.frame(min=c(5,10,15),
max=c(20,30,50))
rownames(test) <- c("a","b","c")
test
test[1,]
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
shiny::runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
install.packages(c("devtools", "irlba", "readr", "rrepast", "tibble", "tidyr"))
shiny::runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
shinyjs:::colourPickerAddin()
options(shiny.reactlog=TRUE)
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
devtools::install_github('rstudio/blogdown')
shiny::runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
setwd("~/Documents/blogdown_sources")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::build_site()
dashboardPage(header, sidebar, body, skin = "black")
source('~/Dropbox/Learn_Shiny_R/App-dashboard/ui.R', echo=TRUE)
runApp('~/Dropbox/Learn_Shiny_R/App-dashboard')
runApp('~/Dropbox/Learn_Shiny_R/App-dashboard')
install.packages(c("backports", "bookdown", "irlba", "knitr", "plotly", "Rcpp", "rlang", "shinydashboard", "tibble"))
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(
dropdownMenuOutput("menu")
),
dashboardSidebar(
helpText("Add another item to the dropdown menu by clicking ",
"on the button below"),
actionButton("addItem", "Add another item")
),
dashboardBody()
)
server <- function(input, output, session) {
tasks <-  reactiveValues(
code = list(id = "code", value = 15, color = "aqua",
text = "Refactor code"),
layout = list(id = "layout", value = 40, color = "green",
text = "Design new layout"),
docs = list(id = "docs", value = 25, color = "red",
text = "Write documentation")
)
# actually render the dropdownMenu
output$menu <- renderMenu({
items <- lapply(tasks, function(el) {
taskItem(value = el$value, color = el$color, text = el$text)
})
dropdownMenu(
type = "tasks", badgeStatus = "danger",
.list = items
)
})
observeEvent(input$addItem, {
showModal(modalDialog(title = "Add new task",
textInput(paste0("id", input$addItem), "Task ID"),
numericInput(paste0("val", input$addItem), "Task value", 0),
selectInput(paste0("col", input$addItem), "Task color",
choices = c("red", "yellow", "aqua", "blue",
"light-blue", "green", "navy", "teal",
"olive", "lime", "orange", "fuchsia",
"purple", "maroon", "black")
),
textInput(paste0("text", input$addItem), "Task text"),
actionButton(paste0("go", input$addItem), "Add item"),
easyClose = TRUE, footer = NULL
))
observeEvent(input[[paste0("go", input$addItem)]], {
tasks[[paste0("id", input$addItem)]] <- list(
id = input[[paste0("id", input$addItem)]],
value = input[[paste0("val", input$addItem)]],
color = input[[paste0("col", input$addItem)]],
text = input[[paste0("text", input$addItem)]]
)
removeModal()
})
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
sidebarMenu(
# Setting id makes input$tabs give the tabName of currently-selected tab
id = "tabs",
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", icon = icon("th"), tabName = "widgets"),
menuItem("Charts", icon = icon("bar-chart-o"),
menuSubItem("Sub-item 1", tabName = "subitem1"),
menuSubItem("Sub-item 2", tabName = "subitem2")
)
),
textOutput("res")
),
dashboardBody(
tabItems(
tabItem("dashboard", "Dashboard tab content"),
tabItem("widgets", "Widgets tab content"),
tabItem("subitem1", "Sub-item 1 tab content"),
tabItem("subitem2", "Sub-item 2 tab content")
)
)
)
server <- function(input, output, session) {
output$res <- renderText({
paste("You've selected:", input$tabs)
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", icon = icon("th"), tabName = "widgets"),
menuItem("Charts", icon = icon("bar-chart-o"), startExpanded = TRUE,
menuSubItem("Sub-item 1", tabName = "subitem1"),
menuSubItem("Sub-item 2", tabName = "subitem2")
)
),
textOutput("res")
),
dashboardBody(
tabItems(
tabItem("dashboard", "Dashboard tab content"),
tabItem("widgets", "Widgets tab content"),
tabItem("subitem1", "Sub-item 1 tab content"),
tabItem("subitem2", "Sub-item 2 tab content")
)
)
)
server <- function(input, output, session) {
output$res <- renderText({
req(input$sidebarItemExpanded)
paste("Expanded menuItem:", input$sidebarItemExpanded)
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
ui <- function(req) {
dashboardPage(
dashboardHeader(),
dashboardSidebar(
sidebarMenu(id = "tabs",
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", icon = icon("th"), tabName = "widgets"),
menuItem("Charts", icon = icon("bar-chart-o"),
menuSubItem("Sub-item 1", tabName = "subitem1"),
menuSubItem("Sub-item 2", tabName = "subitem2")
)
)
),
dashboardBody(
bookmarkButton()
)
)
}
server <- function(input, output, session) {}
shinyApp(ui, server, enableBookmarking = "url")
library(shiny)
library(shinydashboard)
ui <- function(req) {
dashboardPage(
dashboardHeader(),
dashboardSidebar(
sidebarMenu(id = "tabs",
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", icon = icon("th"), tabName = "widgets"),
menuItem("Charts", icon = icon("bar-chart-o"),
menuSubItem("Sub-item 1", tabName = "subitem1"),
menuSubItem("Sub-item 2", tabName = "subitem2"),
bookmarkButton()
)
)
),
dashboardBody(
)
)
}
server <- function(input, output, session) {}
shinyApp(ui, server, enableBookmarking = "url")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::build_site()
blogdown:::serve_site()
blogdown::build_site()
