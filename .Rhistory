nodesIdSelection = list(enabled = TRUE,
#selected = "",
values = c(1:10),
style = 'width: 200px; height: 26px;
background: #f8f8f8;
color: black;
border:none;
outline:none;'),
clickToUse = FALSE,
manipulation = TRUE) %>%
#visLayout(randomSeed = 12, improvedLayout = TRUE)
visIgraphLayout(smooth = TRUE) # to disable repulsion
# Generate the CaP Graph network
nodes_Ca <- data.frame(id = 1:10,
shape = c("text","square","text","square","square","square","square","text", "circle", "circle"), # square are always scalable
label = c("Food", "Intestine"," Feces", "Plasma", "Rapid-Bone", "Bone", "Kidneys", "Urine", "PTH", "PTH_res"),
x = c(8, 12, 18, 12, 0, 0, 22, 22, 12, 6),
y = c(0, 2, 0, 6, 4, 8, 4, 8, 12, 7),
color = list(background = "#97C2FC", border = "#97C2FC", highlight = list(background = "orange", border = "orange")))
edges_Ca <- data.frame(from = c(1,2,2,4,5,5,6,4,7,7,9), to = c(2,3,4,5,4,6,4,7,4,8,10),
label = c("Ca Intake", "Fecal Excretion", " Intestinal absorption ", "Rapid storage", "Rapid release", "Accretion",
"Resorption", "Filtration", "Reabsorption", "Urinary excretion", "+"),
id = 1:11,
dashed = c(F,F,F,F,F,F,F,F,F,F,T),
width = c(1,1,1,1,1,1,1,1,1,1,1,1),
font.size = 10,
length = 200)
visNetwork(nodes_Ca, edges_Ca, width = "100%", height = "100%") %>%
#visNodes(scaling = list(min = 5, max = 100)) %>%
visEdges(shadow = TRUE, font = list(align = "horizontal"),
arrows =list(to = list(enabled = TRUE, scaleFactor = 1, type = "arrow")),
color = list(color = "black", highlight = "red")) %>%
visOptions(highlightNearest = TRUE,
nodesIdSelection = list(enabled = TRUE,
#selected = "",
values = c(1:10),
style = 'width: 200px; height: 26px;
background: #f8f8f8;
color: black;
border:none;
outline:none;'),
clickToUse = FALSE,
manipulation = TRUE) %>%
#visLayout(randomSeed = 12, improvedLayout = TRUE)
visIgraphLayout(smooth = TRUE) # to disable repulsion
# Generate the CaP Graph network
nodes_Ca <- data.frame(id = 1:10,
shape = c("text","square","text","square","square","square","square","text", "circle", "circle"), # square are always scalable
label = c("Food", "Intestine"," Feces", "Plasma", "Rapid-Bone", "Bone", "Kidneys", "Urine", "PTH", "PTH_res"),
x = c(8, 12, 18, 12, 0, 0, 22, 22, 12, 6),
y = c(0, 2, 0, 6, 4, 8, 4, 8, 12, 7),
color = list(background = "#97C2FC", border = "#97C2FC", highlight = list(background = "orange", border = "orange")))
edges_Ca <- data.frame(from = c(1,2,2,4,5,5,6,4,7,7,9), to = c(2,3,4,5,4,6,4,7,4,8,10),
label = c("Ca Intake", "Fecal Excretion", " Intestinal absorption ", "Rapid storage", "Rapid release", "Accretion",
"Resorption", "Filtration", "Reabsorption", "Urinary excretion", "+"),
id = 1:11,
dashed = c(F,F,F,F,F,F,F,F,F,F,T),
width = c(1,1,1,1,1,1,1,1,1,1,1),
font.size = 10,
length = 200)
visNetwork(nodes_Ca, edges_Ca, width = "100%", height = "100%") %>%
#visNodes(scaling = list(min = 5, max = 100)) %>%
visEdges(shadow = TRUE, font = list(align = "horizontal"),
arrows =list(to = list(enabled = TRUE, scaleFactor = 1, type = "arrow")),
color = list(color = "black", highlight = "red")) %>%
visOptions(highlightNearest = TRUE,
nodesIdSelection = list(enabled = TRUE,
#selected = "",
values = c(1:10),
style = 'width: 200px; height: 26px;
background: #f8f8f8;
color: black;
border:none;
outline:none;'),
clickToUse = FALSE,
manipulation = TRUE) %>%
#visLayout(randomSeed = 12, improvedLayout = TRUE)
visIgraphLayout(smooth = TRUE) # to disable repulsion
rep(2,1)
rep(2,2)
# Generate the CaP Graph network
nodes_Ca <- data.frame(id = 1:10,
shape = c("text","square","text","square","square","square","square","text", "circle", "circle"), # square are always scalable
label = c("Food", "Intestine"," Feces", "Plasma", "Rapid-Bone", "Bone", "Kidneys", "Urine", "PTH", "PTH_res"),
x = c(8, 12, 18, 12, 0, 0, 22, 22, 12, 6),
y = c(0, 2, 0, 6, 4, 8, 4, 8, 12, 7),
color = list(background = "#97C2FC", border = "#97C2FC", highlight = list(background = "orange", border = "orange")),
size = c(rep(10,9),5)
edges_Ca <- data.frame(from = c(1,2,2,4,5,5,6,4,7,7,9), to = c(2,3,4,5,4,6,4,7,4,8,10),
label = c("Ca Intake", "Fecal Excretion", " Intestinal absorption ", "Rapid storage", "Rapid release", "Accretion",
"Resorption", "Filtration", "Reabsorption", "Urinary excretion", "+"),
id = 1:11,
dashed = c(F,F,F,F,F,F,F,F,F,F,T),
width = c(1,1,1,1,1,1,1,1,1,1,1),
font.size = 10,
length = 200)
visNetwork(nodes_Ca, edges_Ca, width = "100%", height = "100%") %>%
#visNodes(scaling = list(min = 5, max = 100)) %>%
visEdges(shadow = TRUE, font = list(align = "horizontal"),
arrows =list(to = list(enabled = TRUE, scaleFactor = 1, type = "arrow")),
color = list(color = "black", highlight = "red")) %>%
visOptions(highlightNearest = TRUE,
nodesIdSelection = list(enabled = TRUE,
#selected = "",
values = c(1:10),
style = 'width: 200px; height: 26px;
background: #f8f8f8;
color: black;
border:none;
outline:none;'),
clickToUse = FALSE,
manipulation = TRUE) %>%
#visLayout(randomSeed = 12, improvedLayout = TRUE)
visIgraphLayout(smooth = TRUE) # to disable repulsion
# Generate the CaP Graph network
nodes_Ca <- data.frame(id = 1:10,
shape = c("text","square","text","square","square","square","square","text", "circle", "circle"), # square are always scalable
label = c("Food", "Intestine"," Feces", "Plasma", "Rapid-Bone", "Bone", "Kidneys", "Urine", "PTH", "PTH_res"),
x = c(8, 12, 18, 12, 0, 0, 22, 22, 12, 6),
y = c(0, 2, 0, 6, 4, 8, 4, 8, 12, 7),
color = list(background = "#97C2FC", border = "#97C2FC", highlight = list(background = "orange", border = "orange")),
size = c(rep(10,9),5))
edges_Ca <- data.frame(from = c(1,2,2,4,5,5,6,4,7,7,9), to = c(2,3,4,5,4,6,4,7,4,8,10),
label = c("Ca Intake", "Fecal Excretion", " Intestinal absorption ", "Rapid storage", "Rapid release", "Accretion",
"Resorption", "Filtration", "Reabsorption", "Urinary excretion", "+"),
id = 1:11,
dashed = c(F,F,F,F,F,F,F,F,F,F,T),
width = c(1,1,1,1,1,1,1,1,1,1,1),
font.size = 10,
length = 200)
visNetwork(nodes_Ca, edges_Ca, width = "100%", height = "100%") %>%
#visNodes(scaling = list(min = 5, max = 100)) %>%
visEdges(shadow = TRUE, font = list(align = "horizontal"),
arrows =list(to = list(enabled = TRUE, scaleFactor = 1, type = "arrow")),
color = list(color = "black", highlight = "red")) %>%
visOptions(highlightNearest = TRUE,
nodesIdSelection = list(enabled = TRUE,
#selected = "",
values = c(1:10),
style = 'width: 200px; height: 26px;
background: #f8f8f8;
color: black;
border:none;
outline:none;'),
clickToUse = FALSE,
manipulation = TRUE) %>%
#visLayout(randomSeed = 12, improvedLayout = TRUE)
visIgraphLayout(smooth = TRUE) # to disable repulsion
# Generate the CaP Graph network
nodes_Ca <- data.frame(id = 1:10,
shape = c("text","square","text","square","square","square","square","text", "circle", "star"), # square are always scalable
label = c("Food", "Intestine"," Feces", "Plasma", "Rapid-Bone", "Bone", "Kidneys", "Urine", "PTH", "PTH_res"),
x = c(8, 12, 18, 12, 0, 0, 22, 22, 12, 6),
y = c(0, 2, 0, 6, 4, 8, 4, 8, 12, 7),
color = list(background = "#97C2FC", border = "#97C2FC", highlight = list(background = "orange", border = "orange")),
size = c(rep(10,9),5))
edges_Ca <- data.frame(from = c(1,2,2,4,5,5,6,4,7,7,9), to = c(2,3,4,5,4,6,4,7,4,8,10),
label = c("Ca Intake", "Fecal Excretion", " Intestinal absorption ", "Rapid storage", "Rapid release", "Accretion",
"Resorption", "Filtration", "Reabsorption", "Urinary excretion", "+"),
id = 1:11,
dashed = c(F,F,F,F,F,F,F,F,F,F,T),
width = c(1,1,1,1,1,1,1,1,1,1,1),
font.size = 10,
length = 200)
visNetwork(nodes_Ca, edges_Ca, width = "100%", height = "100%") %>%
#visNodes(scaling = list(min = 5, max = 100)) %>%
visEdges(shadow = TRUE, font = list(align = "horizontal"),
arrows =list(to = list(enabled = TRUE, scaleFactor = 1, type = "arrow")),
color = list(color = "black", highlight = "red")) %>%
visOptions(highlightNearest = TRUE,
nodesIdSelection = list(enabled = TRUE,
#selected = "",
values = c(1:10),
style = 'width: 200px; height: 26px;
background: #f8f8f8;
color: black;
border:none;
outline:none;'),
clickToUse = FALSE,
manipulation = TRUE) %>%
#visLayout(randomSeed = 12, improvedLayout = TRUE)
visIgraphLayout(smooth = TRUE) # to disable repulsion
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
nodes_Ca <- data.frame(id = 1:10,
shape = c("text","square","text","square","square","square","square","text", "circle", "star"), # square are always scalable
label = c("Food", "Intestine"," Feces", "Plasma", "Rapid-Bone", "Bone", "Kidneys", "Urine", "PTH", "PTH_res"),
x = c(8, 12, 18, 12, 0, 0, 22, 22, 12, 6),
y = c(0, 2, 0, 6, 4, 8, 4, 8, 12, 7),
color = list(background = "#97C2FC", border = "#97C2FC", highlight = list(background = "orange", border = "orange")),
size = c(rep(10,9),5))
edges_Ca <- data.frame(from = c(1,2,2,4,5,5,6,4,7,7,9), to = c(2,3,4,5,4,6,4,7,4,8,10),
label = c("Ca Intake", "Fecal Excretion", " Intestinal absorption ", "Rapid storage", "Rapid release", "Accretion",
"Resorption", "Filtration", "Reabsorption", "Urinary excretion", "+"),
id = 1:11,
width = c(1,1,1,1,1,1,1,1,1,1,1),
font.size = 10,
length = 200)
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
ndf <-
create_node_df(
n = 6,
label = TRUE,
fillcolor = c("lightgrey", "red", "orange",
"pink", "aqua", "yellow"),
shape = "circle",
value = c(2, 1, 0.5, 1, 1.8, 1),
type = c("1", "1", "1", "2", "2", "2"),
x = c(1, 2, 3, 4, 5, 6),
y = c(-2, -1, 0, 6, 4, 1))
# Create an edge data frame (edf)
edf <-
create_edge_df(
from = c(1, 2, 3, 4, 6, 5),
to = c(4, 3, 1, 3, 1, 4),
color = c("green", "green", "grey",
"grey", "blue", "blue"),
rel = "leading_to")
# Create a graph object
graph <-
create_graph(
nodes_df = ndf,
edges_df = edf)
visnetwork(graph)
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
library(visNetwork)
library(shiny)
server <- function(input, output) {
output$network <- renderVisNetwork({
# minimal example
nodes <- data.frame(id = 1:3, label = 1:3)
edges <- data.frame(from = c(1,2), to = c(1,3))
visNetwork(nodes, edges) %>%
visInteraction(hover = TRUE) %>%
visEvents(hoverNode = "function(nodes) {
Shiny.onInputChange('current_node_id', nodes);
;}")
})
output$shiny_return <- renderPrint({
input$current_node_id
})
}
ui <- fluidPage(
visNetworkOutput("network"),
verbatimTextOutput("shiny_return")
)
shinyApp(ui = ui, server = server)
require(shiny)
require(visNetwork)
server <- function(input, output) {
output$network_proxy_nodes <- renderVisNetwork({
# minimal example
nodes <- data.frame(id = 1:3)
edges <- data.frame(from = c(1,2), to = c(1,3))
visNetwork(nodes, edges) %>% visNodes(color = "blue")
})
observe({
visNetworkProxy("network_proxy_nodes") %>%
visFocus(id = input$Focus, scale = 4)
})
observe({
visNetworkProxy("network_proxy_nodes") %>%
visNodes(color = input$color)
})
}
ui <- fluidPage(
fluidRow(
column(
width = 4,
selectInput("color", "Color :",
c("blue", "red", "green")),
selectInput("Focus", "Focus on node :",
c(1:3))
),
column(
width = 8,
visNetworkOutput("network_proxy_nodes", height = "400px")
)
)
)
shinyApp(ui = ui, server = server)
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
library(shiny)
library(sweetalertR)
jscode <- "shinyjs.swal = function(params) { swal.apply(this, params); }"
runApp(shinyApp(
ui = fluidPage(
shinyjs::useShinyjs(),
shinyjs::extendShinyjs(text = jscode),
textInput("title", "Title"),
textInput("text", "Text"),
selectInput("type", "Type", c("warning", "error", "success")),
actionButton("swal", "Action!"),
sweetalert()
),
server = function(input, output, session) {
observeEvent(input$swal, {
shinyjs::js$swal(input$title, input$text, input$type)
})
}
)
)
library(shiny)
library(sweetalertR)
jscode <- "shinyjs.swal = function(params) { swal.apply(); }"
runApp(shinyApp(
ui = fluidPage(
shinyjs::useShinyjs(),
shinyjs::extendShinyjs(text = jscode),
textInput("title", "Title"),
textInput("text", "Text"),
selectInput("type", "Type", c("warning", "error", "success")),
actionButton("swal", "Action!"),
sweetalert()
),
server = function(input, output, session) {
observeEvent(input$swal, {
shinyjs::js$swal()
})
}
)
)
library(shiny)
library(sweetalertR)
jscode <- "shinyjs.swal = function(params) { swal.apply(this, params); }"
runApp(shinyApp(
ui = fluidPage(
shinyjs::useShinyjs(),
shinyjs::extendShinyjs(text = jscode),
textInput("title", "Title"),
textInput("text", "Text"),
selectInput("type", "Type", c("warning", "error", "success")),
actionButton("swal", "Action!"),
sweetalert()
),
server = function(input, output, session) {
observeEvent(input$swal, {
shinyjs::js$swal(input$type)
})
}
)
)
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
shinyApp(
ui = fluidPage(
actionButton("show", "Show"),
actionButton("remove", "Remove")
),
server = function(input, output) {
# A queue of notification IDs
ids <- character(0)
# A counter
n <- 0
observeEvent(input$show, {
# Save the ID for removal later
id <- showNotification(paste("Message", n), duration = NULL)
ids <<- c(ids, id)
n <<- n + 1
})
observeEvent(input$remove, {
if (length(ids) > 0)
removeNotification(ids[1])
ids <<- ids[-1]
})
}
)
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
if (interactive()) {
shinyApp(
ui = fluidPage(
tags$h1("Click the button"),
actionButton(inputId = "success", label = "Launch a success sweet alert"),
receiveSweetAlert(messageId = "successSw")
),
server = function(input, output) {
observeEvent(input$success, {
sendSweetAlert(
messageId = "successSw", title = "Success !!", text = "All in order", type = "success"
)
})
}
)
}
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
library(visNetwork)
library(shiny)
server <- function(input, output) {
output$network <- renderVisNetwork({
# minimal example
nodes <- data.frame(id = 1:3, label = 1:3)
edges <- data.frame(from = c(1,2), to = c(1,3))
visNetwork(nodes, edges) %>%
visInteraction(hover = TRUE) %>%
visEvents(hoverNode = "function(nodes) {
Shiny.onInputChange('current_node_id', nodes);
;}")
})
output$shiny_return <- renderPrint({
input$current_node_id
})
}
ui <- fluidPage(
visNetworkOutput("network"),
verbatimTextOutput("shiny_return")
)
shinyApp(ui = ui, server = server)
R
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
shiny::runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Learn_Shiny_R/Tutorials/Tutorial_Apps/App-R_learning')
setwd("~/Documents/blogdown_sources")
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
shinyLP::runExample()
runApp('~/Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('~/Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('~/Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('~/Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('~/Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('~/Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('~/Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('~/Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('~/Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('~/Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('~/Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('~/Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('~/Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('~/Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('~/Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
devtools::install_github("stefanwilhelm/ShinyRatingInput")
library(ShinyRatingInput)
shinyUI(bootstrapPage(
ratingInput("movieRating", label="Rate this movie...", dataStop=10, dataFractions=2),
htmlOutput("movieRating")
))
#the corresponding server.R
shinyServer(function(input, output, session) {
output$movieRating <- renderText({
paste("The movie was rated ",input$movieRating)
})
})
library(shiny)
library(shiny)
shiny::runApp('~/Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
shiny::runApp('~/Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
install.packages("shiny")
shiny::runApp('~/Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
