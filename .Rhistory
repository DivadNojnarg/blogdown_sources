# Whenever a field is filled, aggregate all form data
formData <- reactive({
data <- sapply(fields, function(x) input[[x]])
data
})
# When the Submit button is clicked, save the form data
observeEvent(input$submit, {
saveData(formData())
})
# Show the previous responses
# (update with current response when Submit is clicked)
output$responses <- DT::renderDataTable({
input$submit
loadData()
})
}
)
library(shiny)
# Define the fields we want to save from the form
fields <- c("name", "used_shiny", "r_num_years")
saveData <- function(data) {
data <- as.data.frame(t(data))
if (exists("responses")) {
responses <<- rbind(responses, data)
} else {
responses <<- data
}
}
loadData <- function() {
if (exists("responses")) {
responses
}
}
# Shiny app with 3 fields that the user can submit data for
shinyApp(
ui = fluidPage(
DT::dataTableOutput("responses", width = 200), tags$hr(),
textInput("name", "Name", ""),
checkboxInput("used_shiny", "I've built a Shiny app in R before", FALSE),
sliderInput("r_num_years", "Number of years using R",
0, 25, 2, ticks = FALSE),
actionButton("submit", "Submit")
),
server = function(input, output, session) {
# Whenever a field is filled, aggregate all form data
formData <- reactive({
data <- sapply(fields, function(x) input[[x]])
data
})
# When the Submit button is clicked, save the form data
observeEvent(input$submit, {
saveData(formData())
})
# Show the previous responses
# (update with current response when Submit is clicked)
output$responses <- DT::renderDataTable({
input$submit
loadData()
})
}
)
library(shiny)
# Define the fields we want to save from the form
fields <- c("name", "used_shiny", "r_num_years")
saveData <- function(data) {
data <- as.data.frame(t(data))
if (exists("responses")) {
responses <<- rbind(responses, data)
} else {
responses <<- data
}
}
loadData <- function() {
if (exists("responses")) {
responses
}
}
# Shiny app with 3 fields that the user can submit data for
shinyApp(
ui = fluidPage(
DT::dataTableOutput("responses", width = 100), tags$hr(),
textInput("name", "Name", ""),
checkboxInput("used_shiny", "I've built a Shiny app in R before", FALSE),
sliderInput("r_num_years", "Number of years using R",
0, 25, 2, ticks = FALSE),
actionButton("submit", "Submit")
),
server = function(input, output, session) {
# Whenever a field is filled, aggregate all form data
formData <- reactive({
data <- sapply(fields, function(x) input[[x]])
data
})
# When the Submit button is clicked, save the form data
observeEvent(input$submit, {
saveData(formData())
})
# Show the previous responses
# (update with current response when Submit is clicked)
output$responses <- DT::renderDataTable({
input$submit
loadData()
})
}
)
library(shiny)
# Define the fields we want to save from the form
fields <- c("name", "used_shiny", "r_num_years")
saveData <- function(data) {
data <- as.data.frame(t(data))
if (exists("responses")) {
responses <<- rbind(responses, data)
} else {
responses <<- data
}
}
loadData <- function() {
if (exists("responses")) {
responses
}
}
# Shiny app with 3 fields that the user can submit data for
shinyApp(
ui = fluidPage(
DT::dataTableOutput("responses", width = 300), tags$hr(),
textInput("name", "Name", ""),
checkboxInput("used_shiny", "I've built a Shiny app in R before", FALSE),
sliderInput("r_num_years", "Number of years using R",
0, 25, 2, ticks = T),
actionButton("submit", "Submit")
),
server = function(input, output, session) {
# Whenever a field is filled, aggregate all form data
formData <- reactive({
data <- sapply(fields, function(x) input[[x]])
data
})
# When the Submit button is clicked, save the form data
observeEvent(input$submit, {
saveData(formData())
})
# Show the previous responses
# (update with current response when Submit is clicked)
output$responses <- DT::renderDataTable({
input$submit
loadData()
})
}
)
library(shiny)
# Define the fields we want to save from the form
fields <- c("name", "used_shiny", "r_num_years")
saveData <- function(data) {
data <- as.data.frame(t(data))
if (exists("responses")) {
responses <<- rbind(responses, data)
} else {
responses <<- data
}
}
loadData <- function() {
if (exists("responses")) {
responses
}
}
# Shiny app with 3 fields that the user can submit data for
shinyApp(
ui = fluidPage(
DT::dataTableOutput("responses", width = 300), tags$hr(),
textInput("name", "Name", ""),
checkboxInput("used_shiny", "I've built a Shiny app in R before", FALSE),
sliderInput("r_num_years", "Number of years using R",
0, 25, 2, ticks = F),
actionButton("submit", "Submit")
),
server = function(input, output, session) {
# Whenever a field is filled, aggregate all form data
formData <- reactive({
data <- sapply(fields, function(x) input[[x]])
data
})
# When the Submit button is clicked, save the form data
observeEvent(input$submit, {
saveData(formData())
})
# Show the previous responses
# (update with current response when Submit is clicked)
output$responses <- DT::renderDataTable({
input$submit
loadData()
})
}
)
library(shiny)
# Define the fields we want to save from the form
fields <- c("name", "used_shiny", "r_num_years")
saveData <- function(data) {
data <- as.data.frame(t(data))
if (exists("responses")) {
responses <<- rbind(responses, data)
} else {
responses <<- data
}
}
loadData <- function() {
if (exists("responses")) {
responses
}
}
# Shiny app with 3 fields that the user can submit data for
shinyApp(
ui = fluidPage(
DT::dataTableOutput("responses", width = 300), tags$hr(),
textInput("name", "Name", ""),
checkboxInput("used_shiny", "I've built a Shiny app in R before", FALSE),
sliderInput("r_num_years", "Number of years using R",
0, 25, 2, ticks = F),
actionButton("submit", "Submit")
),
server = function(input, output, session) {
# Whenever a field is filled, aggregate all form data
formData <- reactive({
data <- sapply(fields, function(x) input[[x]])
#data
})
# When the Submit button is clicked, save the form data
observeEvent(input$submit, {
saveData(formData())
})
# Show the previous responses
# (update with current response when Submit is clicked)
output$responses <- DT::renderDataTable({
input$submit
loadData()
})
}
)
install.packages(c("assertthat", "boot", "curl", "foreign", "formatR", "jsonlite", "lme4", "markdown", "MASS", "memoise", "plotly", "quantreg", "rmarkdown", "rpart", "scatterplot3d", "shiny", "sourcetools", "SparseM", "stringi", "survival", "zoo"))
install.packages(c("assertthat", "boot", "curl", "foreign", "formatR", "jsonlite", "lme4", "markdown", "MASS", "memoise", "plotly", "quantreg", "rmarkdown", "rpart", "scatterplot3d", "shiny", "sourcetools", "SparseM", "stringi", "survival", "zoo"))
install.packages(c("assertthat", "boot", "curl", "foreign", "formatR", "jsonlite", "lme4", "markdown", "MASS", "memoise", "plotly", "quantreg", "rmarkdown", "rpart", "scatterplot3d", "shiny", "sourcetools", "SparseM", "stringi", "survival", "zoo"))
install.packages(c("assertthat", "boot", "curl", "foreign", "formatR", "jsonlite", "lme4", "markdown", "MASS", "memoise", "plotly", "quantreg", "rmarkdown", "rpart", "scatterplot3d", "shiny", "sourcetools", "SparseM", "stringi", "survival", "zoo"))
install.packages(c("assertthat", "boot", "curl", "foreign", "formatR", "jsonlite", "lme4", "markdown", "MASS", "memoise", "plotly", "quantreg", "rmarkdown", "rpart", "scatterplot3d", "shiny", "sourcetools", "SparseM", "stringi", "survival", "zoo"))
install.packages(c("assertthat", "boot", "curl", "foreign", "formatR", "jsonlite", "lme4", "markdown", "MASS", "memoise", "plotly", "quantreg", "rmarkdown", "rpart", "scatterplot3d", "shiny", "sourcetools", "SparseM", "stringi", "survival", "zoo"))
install.packages(c("assertthat", "boot", "curl", "foreign", "formatR", "jsonlite", "lme4", "markdown", "MASS", "memoise", "plotly", "quantreg", "rmarkdown", "rpart", "scatterplot3d", "shiny", "sourcetools", "SparseM", "stringi", "survival", "zoo"))
install.packages(c("assertthat", "boot", "curl", "foreign", "formatR", "jsonlite", "lme4", "markdown", "MASS", "memoise", "plotly", "quantreg", "rmarkdown", "rpart", "scatterplot3d", "shiny", "sourcetools", "SparseM", "stringi", "survival", "zoo"))
install.packages(c("assertthat", "boot", "curl", "foreign", "formatR", "jsonlite", "lme4", "markdown", "MASS", "memoise", "plotly", "quantreg", "rmarkdown", "rpart", "scatterplot3d", "shiny", "sourcetools", "SparseM", "stringi", "survival", "zoo"))
install.packages(c("assertthat", "boot", "curl", "foreign", "formatR", "jsonlite", "lme4", "markdown", "MASS", "memoise", "plotly", "quantreg", "rmarkdown", "rpart", "scatterplot3d", "shiny", "sourcetools", "SparseM", "stringi", "survival", "zoo"))
install.packages(c("assertthat", "boot", "curl", "foreign", "formatR", "jsonlite", "lme4", "markdown", "MASS", "memoise", "plotly", "quantreg", "rmarkdown", "rpart", "scatterplot3d", "shiny", "sourcetools", "SparseM", "stringi", "survival", "zoo"))
shinyApp(ui, server)
library('shiny')
library('shinydashboard')
# Sidebar #############################
sidebar <- dashboardSidebar(
tags$head(
tags$script(
HTML(
"
$(document).ready(function(){
// Bind classes to menu items, easiet to fill in manually
var ids = ['subItemOne','subItemTwo','subItemThree','subItemFour'];
for(i=0; i<ids.length; i++){
$('a[data-value='+ids[i]+']').addClass('my_subitem_class');
}
// Register click handeler
$('.my_subitem_class').on('click',function(){
// Unactive menuSubItems
$('.my_subitem_class').parent().removeClass('active');
})
})
"
)
)
),
width = 290,
sidebarMenu(
menuItem('Menu One', tabName = 'menuOne', icon = icon('line-chart'),
collapsible =
menuSubItem('Sub-Item One', tabName = 'subItemOne'),
menuSubItem('Sub-Item Two', tabName = 'subItemTwo')
)
),
sidebarMenu(
menuItem('Menu Two', tabName = 'menuTwo', icon = icon('users'),
collapsible =
menuSubItem('Sub-Item Three', tabName = 'subItemThree'),
menuSubItem('Sub-Item Four', tabName = 'subItemFour')
)
)
)
# Body #############################
body <- dashboardBody(
tabItems(
tabItem(tabName = 'subItemOne',
h2('Selected Sub-Item One')
),
tabItem(tabName = 'subItemTwo',
h2('Selected Sub-Item Two')
),
tabItem(tabName = 'subItemThree',
h2('Selected Sub-Item Three')
),
tabItem(tabName = 'subItemFour',
h2('Selected Sub-Item Four')
)
)
)
# UI #############################
ui <- dashboardPage(
dashboardHeader(title = 'Test', titleWidth = 290),
sidebar,
body
)
# Server #############################
server <- function(input, output){
}
shinyApp(ui, server)
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
library(shiny)
shinyApp(
ui = fluidPage(
textInput("text", "text", ""),
selectInput("select", "select", 1:5),
uiOutput("ui"),
actionButton("save", "Save"),
actionButton("load", "Load")
),
server = function(input, output, session) {
output$ui <- renderUI({
tagList(
numericInput("num", "num", 7),
checkboxGroupInput("chk", "chk", 1:5, c(2,4))
)
})
observeEvent(input$save, {
values <<- lapply(reactiveValuesToList(input), unclass)
})
observeEvent(input$load, {
if (exists("values")) {
lapply(names(values),
function(x) session$sendInputMessage(x, list(value = values[[x]]))
)
}
})
}
)
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
install.packages("RSQLite")
source('Dropbox/Learn_Shiny_R/login_example.R')
output$pass <- renderText({
if(USER$Logged == FALSE) {
if(!is.null(input$Login)) {
if(input$Login > 0) {
Username <- isolate(input[[paste0('username', USER$Unique)]])
Password <- isolate(input[[paste0('password', USER$Unique)]])
Id.username <- which(PASSWORD$Username == Username)
if(length(Id.username) == 1 &
Password == PASSWORD[Id.username,]$Password) {
USER$Logged <- TRUE
USER$Username <- Username
} else  {
"Username or password failed!"
}
}
}
}
})
USER <- reactiveValues(Logged = Logged,
Unique = format(Sys.time(), '%Y%m%d%H%M%S'),
Username = NA)
passwdInput <- function(inputId, label, value) {
tagList(
tags$label(label),
tags$input(id=inputId, type="password", value=value)
)
}
output$uiLogin <- renderUI({
if(USER$Logged == FALSE) {
wellPanel(
div(textInput(paste0("username", USER$Unique), "Username: ", value='')),
div(passwdInput(paste0("password", USER$Unique), "Password: ", value='')),
br(), br(),
actionButton("Login", "Login")
)
}
})
output$uiLogout <- renderUI({
actionButton('logoutButton', 'Logout')
})
observeEvent(input$logoutButton, {
if(!is.null(input$logoutButton) & input$logoutButton == 1) {
USER$Logged <- FALSE
USER$Username <- NA
USER$Unique <- format(Sys.time(), '%Y%m%d%H%M%S')
}
})
output$pass <- renderText({
if(USER$Logged == FALSE) {
if(!is.null(input$Login)) {
if(input$Login > 0) {
Username <- isolate(input[[paste0('username', USER$Unique)]])
Password <- isolate(input[[paste0('password', USER$Unique)]])
Id.username <- which(PASSWORD$Username == Username)
if(length(Id.username) == 1 &
Password == PASSWORD[Id.username,]$Password) {
USER$Logged <- TRUE
USER$Username <- Username
} else  {
"Username or password failed!"
}
}
}
}
})
source('Dropbox/Learn_Shiny_R/login_example.R')
library(shiny); source('Dropbox/Learn_Shiny_R/login_example.R')
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
source('Dropbox/Learn_Shiny_R/login_example.R')
source('Dropbox/Learn_Shiny_R/login_example.R')
source('Dropbox/Learn_Shiny_R/login_example.R')
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
shiny::runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
shiny::runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
runApp('Dropbox/Learn_Shiny_R/App-1')
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
runApp('Dropbox/Learn_Shiny_R/App-1-with-navbarPage')
install.packages(c("Hmisc", "Matrix", "RcppEigen", "tidyr", "XML"))
R
install.packages("DiagrammeR")
install.packages("shinyAce")
install.packages("GGally")
install.packages("deTestset")
install.packages("deTestSet")
install.packages(c("devtools", "plotrix", "R6", "rsconnect"))
library(parallel)
no_cores <- detectCores() - 1
no_cores
cl <- makeCluster(no_cores)
cl
shiny::runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
data.frame(min=c(5,10,15),
max=c(20,30,50))
rownames(data.frame(min=c(5,10,15),
max=c(20,30,50))) = c("a","b","c")
rownames(data.frame(min=c(5,10,15),
max=c(20,30,50))) <- c("a","b","c")
test <- data.frame(min=c(5,10,15),
max=c(20,30,50))
rownames(test) <- c("a","b","c")
test
test[1,]
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
shiny::runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
install.packages(c("devtools", "irlba", "readr", "rrepast", "tibble", "tidyr"))
shiny::runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
shinyjs:::colourPickerAddin()
options(shiny.reactlog=TRUE)
runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
devtools::install_github('rstudio/blogdown')
shiny::runApp('Dropbox/Learn_Shiny_R/App-1-dashboard_test')
setwd("~/Documents/blogdown_sources")
blogdown:::serve_site()
