runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
shiny::runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
ui <- fluidPage(
actionButton("add", "Add UI")
)
server <- function(input, output, session) {
observeEvent(input$add, {
insertUI(
selector = "#add",
where = "afterEnd",
ui = textInput(paste0("txt", input$add),
"Insert some text")
)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
actionButton("add", "Add UI")
)
server <- function(input, output, session) {
observeEvent(input$add, {
insertUI(
selector = "#add",
where = "afterEnd",
ui = textInput(paste0("txt", input$add),
"Insert some text")
)
})
}
shinyApp(ui, server)
runApp('Dropbox/Post_Doc_Zurich_2017/WebApp_CaP_homeostasis')
shinyApp(
ui = fluidPage(
sliderInput("slider", "Slider", 1, 100, 50),
downloadButton("report", "Generate report")
),
server = function(input, output) {
output$report <- downloadHandler(
# For PDF output, change this to "report.pdf"
filename = "report.pdf",
content = function(file) {
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path(tempdir(), "report.Rmd")
file.copy("report.Rmd", tempReport, overwrite = TRUE)
# Set up parameters to pass to Rmd document
params <- list(n = input$slider)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,
params = params,
envir = new.env(parent = globalenv())
)
}
)
}
)
shinyApp(
ui = fluidPage(
sliderInput("slider", "Slider", 1, 100, 50),
downloadButton("report", "Generate report")
),
server = function(input, output) {
output$report <- downloadHandler(
# For PDF output, change this to "report.pdf"
filename = "report.pdf",
content = function(file) {
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path(tempdir(), "report.Rmd")
file.copy("report.Rmd", tempReport, overwrite = TRUE)
# Set up parameters to pass to Rmd document
params <- list(n = input$slider)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,
params = params,
envir = new.env(parent = globalenv())
)
}
)
}
)
setwd("~/Dropbox/Learn_Shiny_R/Tutorials/Tutorial_Apps/Report_generator")
shinyApp(
ui = fluidPage(
sliderInput("slider", "Slider", 1, 100, 50),
downloadButton("report", "Generate report")
),
server = function(input, output) {
output$report <- downloadHandler(
# For PDF output, change this to "report.pdf"
filename = "report.pdf",
content = function(file) {
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path(tempdir(), "report.Rmd")
file.copy("report.Rmd", tempReport, overwrite = TRUE)
# Set up parameters to pass to Rmd document
params <- list(n = input$slider)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,
params = params,
envir = new.env(parent = globalenv())
)
}
)
}
)
shinyApp(
ui = fluidPage(
sliderInput("slider", "Slider", 1, 100, 50),
downloadButton("report", "Generate report")
),
server = function(input, output) {
output$report <- downloadHandler(
# For PDF output, change this to "report.pdf"
filename = "report.pdf",
content = function(file) {
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path(tempdir(), "report.Rmd")
file.copy("report.Rmd", tempReport, overwrite = TRUE)
# Set up parameters to pass to Rmd document
params <- list(n = input$slider)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,
params = params,
envir = new.env(parent = globalenv())
)
}
)
}
)
shinyApp(
ui = fluidPage(
sliderInput("slider", "Slider", 1, 100, 50),
downloadButton("report", "Generate report")
),
server = function(input, output) {
output$report <- downloadHandler(
# For PDF output, change this to "report.pdf"
filename = "report.pdf",
content = function(file) {
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path(tempdir(), "report.Rmd")
file.copy("report.Rmd", tempReport, overwrite = TRUE)
# Set up parameters to pass to Rmd document
params <- list(n = input$slider)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,
params = params,
envir = new.env(parent = globalenv())
)
}
)
}
)
runApp('~/Dropbox/Learn_Shiny_R/Published_Apps/App-model_reader')
runApp('~/Dropbox/Learn_Shiny_R/Published_Apps/App-model_reader')
runApp('~/Dropbox/Learn_Shiny_R/Published_Apps/App-model_reader')
runApp('~/Dropbox/Learn_Shiny_R/Published_Apps/App-model_reader')
runApp('~/Dropbox/Learn_Shiny_R/Published_Apps/App-model_reader')
runApp('~/Dropbox/Learn_Shiny_R/Published_Apps/App-model_reader')
points <- list(x=vector("numeric", 0), y=vector("numeric", 0))
server <- function(input, output) {
output$plotPoints <-  <- renderPlot({
ok <- input$add
points$x <<- c(points$x, isolate(input$x))
points$y <<- c(points$y, isolate(input$y))
plot(points$x, points$y)
})
}
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
actionButton("add", "Add a point to the graph:")
),
mainPanel(plotOutput("plotPoints"))
)
)
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$plotPoints <- renderPlot({
ok <- input$add
points$x <<- c(points$x, isolate(input$x))
points$y <<- c(points$y, isolate(input$y))
plot(points$x, points$y)
})
}
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
actionButton("add", "Add a point to the graph:")
),
mainPanel(plotOutput("plotPoints"))
)
)
shinyApp(ui = ui, server = server)
points <- list(x=vector("numeric", 0), y=vector("numeric", 0))
server <- function(input, output) {
output$plotPoints <- renderPlot({
input$add
points$x <<- c(points$x, isolate(input$x))
points$y <<- c(points$y, isolate(input$y))
plot(points$x, points$y)
})
}
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
actionButton("add", "Add a point to the graph:")
),
mainPanel(plotOutput("plotPoints", clickId = "plot_click"))
)
)
shinyApp(ui = ui, server = server)
points <- list(x=vector("numeric", 1), y=vector("numeric", 1))
server <- function(input, output) {
output$plotPoints <- renderPlot({
input$add
points$x <<- c(points$x, isolate(input$x))
points$y <<- c(points$y, isolate(input$y))
plot(points$x, points$y)
})
}
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
actionButton("add", "Add a point to the graph:")
),
mainPanel(plotOutput("plotPoints", clickId = "plot_click"))
)
)
shinyApp(ui = ui, server = server)
points <- list(x=vector("numeric", 1), y=vector("numeric", 1))
server <- function(input, output) {
output$plotPoints <- renderPlot({
input$plot_click
points$x <<- c(points$x, isolate(input$x))
points$y <<- c(points$y, isolate(input$y))
plot(points$x, points$y)
})
}
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
#actionButton("add", "Add a point to the graph:")
),
mainPanel(plotOutput("plotPoints", clickId = "plot_click"))
)
)
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
h1("Plot click demo"),
plotOutput("plot", clickId = "plot_click"),
actionButton("reset", "Reset zoom")
)
server <- function(input, output, session) {
v <- reactiveValues(
click1 = NULL  # Represents the first mouse click, if any
)
# Handle clicks on the plot
observeEvent(input$plot_click, {
if (is.null(v$click1)) {
# We don't have a first click, so this is the first click
v$click1 <- input$plot_click
} else {
# We already had a first click, so this is the second click.
v$click1 <- NULL
}
})
observeEvent(input$reset, {
# Reset the first click, if any.
v$click1 <- NULL
})
output$plot <- renderPlot({
plot(cars)
if (!is.null(v$click1$x))
abline(v = v$click1$x)
})
}
shinyApp(ui, server)
points <- list(x=vector("numeric", 1), y=vector("numeric", 1))
server <- function(input, output) {
output$plotPoints <- renderPlot({
input$plot_click
points$x <<- c(points$x, isolate(input$plot_click$x))
points$y <<- c(points$y, isolate(input$plot_click$y))
plot(points$x, points$y)
})
}
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
#actionButton("add", "Add a point to the graph:")
),
mainPanel(plotOutput("plotPoints", clickId = "plot_click"))
)
)
shinyApp(ui = ui, server = server
)
points <- list(x=vector("numeric", 1), y=vector("numeric", 1))
server <- function(input, output) {
output$plotPoints <- renderPlot({
input$plot_click
points$x <<- c(points$x, isolate(input$plot_click$x))
points$y <<- c(points$y, isolate(input$plot_click$y))
plot(points$x, points$y)
})
}
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
#actionButton("add", "Add a point to the graph:")
),
mainPanel(plotOutput("plotPoints", click = "plot_click"))
)
)
shinyApp(ui = ui, server = server)
runApp('~/Dropbox/Learn_Shiny_R/Published_Apps/App-model_reader')
runApp('~/Dropbox/Learn_Shiny_R/Published_Apps/App-model_reader')
state <-  list(x1=vector("numeric", 1), x2=vector("numeric", 1))
state
state <- c(x1=1, x2=2)
state
state <-  list(x1=vector("numeric", 1), x2=vector("numeric", 1))
state
as.vector (state)
dim(state)
nrow(state)
c(x1=state$x1, x2= state$x2)
state <-  list(x1=vector("numeric", 1), x2=vector("numeric", 1))
state
runApp('~/Dropbox/Learn_Shiny_R/Published_Apps/App-model_reader')
runApp('~/Dropbox/Learn_Shiny_R/Published_Apps/App-model_reader')
state <-  list(x1=vector("numeric", 1), x2=vector("numeric", 1))
state$x1 <<- 1
state$x2 <<- 1
state <-  list(x1=vector("numeric", 1), x2=vector("numeric", 1))
state$x1 <<- 1
state$x2 <<- 1
state <-  list(x1=vector("numeric", 1), x2=vector("numeric", 1))
state$x1 <- 1
state$x2 <- 1
runApp('~/Dropbox/Learn_Shiny_R/Published_Apps/App-model_reader')
state <-  list(x1=vector("numeric", 1), x2=vector("numeric", 1))
state$x1 <- 1
state$x2 <- 1
state
c(x1=state$x1[length(state)], x2= state$x2[length(state)])
length(state)
runApp('~/Dropbox/Learn_Shiny_R/Published_Apps/App-model_reader')
runApp('~/Dropbox/Learn_Shiny_R/Published_Apps/App-model_reader')
runApp('~/Dropbox/Learn_Shiny_R/Published_Apps/App-model_reader')
runApp('~/Dropbox/Learn_Shiny_R/Published_Apps/App-model_reader')
state <-  list(x1=vector("numeric", 1), x2=vector("numeric", 1))
state$x1 <- 1
state$x2 <- 1
y0 <- matrix(state, ncol = 2, nrow = length(state$x1), byrow = TRUE)
y0
state$x1 <- c(state$x1, 2)
state$x2 <- c(state$x2, 2)
state
y0 <- matrix(state, ncol = 2, nrow = length(state$x1), byrow = TRUE)
y0
runApp('~/Dropbox/Learn_Shiny_R/Published_Apps/App-model_reader')
runApp('~/Dropbox/Learn_Shiny_R/Published_Apps/App-model_reader')
runApp('~/Dropbox/Learn_Shiny_R/Published_Apps/App-model_reader')
state <-  list(x1=vector("numeric", 1), x2=vector("numeric", 1))
state$x1 <- 1
state$x2 <- 1
state
state$x1 <<- c(state$x1, isolate(input$phase_click$x))
state$x2 <<- c(state$x2, isolate(input$phase_click$y))
state$x1 <- c(state$x1, 2)
state$x2 <- c(state$x2, 2)
state
y0 <- matrix(as.numeric(state), ncol = 2, nrow = length(state$x1), byrow = TRUE)
y0 <- matrix(state, ncol = 2, nrow = length(state$x1), byrow = TRUE)
y0
y0[1,1]
Y0[1,2]
y0[1,2]
length(state$x1)
state
state$x1[1]
state$x1[2]
test <-  c(x1=vector("numeric", 1), x2=vector("numeric", 1))
test
test$x1 <- 1
test$x2 <- 1
test
unlist(state)
y0 <- matrix(unlist(state), ncol = 2, nrow = length(state$x1), byrow = TRUE)
y0
y0 <- matrix(unlist(state), ncol = 2, nrow = length(state$x1), bycol = TRUE)
y0 <- matrix(unlist(state), ncol = 2, nrow = length(state$x1), byrow = F)
y0
runApp('~/Dropbox/Learn_Shiny_R/Published_Apps/App-model_reader')
runApp('~/Dropbox/Learn_Shiny_R/Published_Apps/App-model_reader')
runApp('~/Dropbox/Learn_Shiny_R/Published_Apps/App-model_reader')
runApp('~/Dropbox/Learn_Shiny_R/Published_Apps/App-model_reader')
runApp('~/Dropbox/Learn_Shiny_R/Published_Apps/App-model_reader')
setwd("~/Documents/blogdown_sources")
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
install.packages("leaflet")
blogdown::build_site()
runApp('~/Desktop/shiny_weather')
library(httr)
devtools::install_github("shiny-gridster", "wch")
devtools::install_github(wch/shiny-gridster )
runApp('~/Desktop/shiny_weather')
library(shinyGridster)
runApp('~/Desktop/shiny_weather')
library(knob)
install.packages("Knob")
install_github('ramnathv/knob')
install::github('ramnathv/knob')
devtools::install_github('ramnathv/knob')
library(knob)
library(shiny)
library(htmlwidgets)
library(knob)
ui = bootstrapPage(
tags$style('body{margin-left:40px; margin-top:40px;}'),
sliderInput('value', 'Value', 0, 200, 50),
sliderInput('angleArc', 'Arc Angle', 0, 360, 250),
knobOutput('live_gauge', width = 250, height = 200)
)
server = function(input, output, session){
output$live_gauge <- renderWidget(list(
title = 'My Gauge',
min = 0,
value = input$value,
angleArc = input$angleArc,
max = 200
))
}
runApp(list(ui = ui, server = server))
library(shiny)
library(htmlwidgets)
library(knob)
ui = bootstrapPage(
tags$style('body{margin-left:40px; margin-top:40px;}'),
sliderInput('value', 'Value', 0, 200, 50),
sliderInput('angleArc', 'Arc Angle', 0, 360, 250),
knobOutput('live_gauge', width = 250, height = 200)
)
server = function(input, output, session){
output$live_gauge <- renderWidget(list(
title = 'My Gauge',
min = 0,
value = input$value,
angleArc = input$angleArc,
max = 200
))
}
runApp(list(ui = ui, server = server))
library(devtools)
install_github('ramnathv/justGage')
library(shiny)
library(htmlwidgets)
library(knob)
ui = bootstrapPage(
tags$style('body{margin-left:40px; margin-top:40px;}'),
sliderInput('value', 'Value', 0, 200, 50),
sliderInput('angleArc', 'Arc Angle', 0, 360, 250),
knobOutput('live_gauge', width = 250, height = 200)
)
server = function(input, output, session){
output$live_gauge <- renderWidget(list(
title = 'My Gauge',
min = 0,
value = input$value,
angleArc = input$angleArc,
max = 200
))
}
runApp(list(ui = ui, server = server))
devtools::install_github("ShinyDash", "trestletech")
runApp('~/Desktop/ShinyDash-Sample-master')
install.packages("shinyWidgets")
