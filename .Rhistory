f = parameters["d2"]*log(x1grid) + parameters["r1"]*log(x2grid) - parameters["c1"]*x2grid - parameters["c2"]*x1grid
}
ip(x1grid,x2grid)
test<-ip(x1grid,x2grid)
test
runApp('Dropbox/Learn_Shiny_R/Lotka_volterra_Apps/App-1-Lotka_Volterra')
runApp('Dropbox/Learn_Shiny_R/Lotka_volterra_Apps/App-1-Lotka_Volterra')
runApp('Dropbox/Learn_Shiny_R/Lotka_volterra_Apps/App-1-Lotka_Volterra')
runApp('Dropbox/Learn_Shiny_R/Lotka_volterra_Apps/App-1-Lotka_Volterra')
runApp('Dropbox/Learn_Shiny_R/Lotka_volterra_Apps/App-1-Lotka_Volterra')
runApp('Dropbox/Learn_Shiny_R/Lotka_volterra_Apps/App-1-Lotka_Volterra')
runApp('Dropbox/Learn_Shiny_R/Lotka_volterra_Apps/App-1-Lotka_Volterra')
parameters <- function(input){
parms <- c(input$a1,input$c1,input$c2,input$d2)
}
parameters <- function(){
parms <- c(1,2,3,4)
}
parameters
parameters()[1]
runApp('Dropbox/Learn_Shiny_R/Lotka_volterra_Apps/App-1-Lotka_Volterra')
runApp('Dropbox/Learn_Shiny_R/Lotka_volterra_Apps/App-1-Lotka_Volterra')
runApp('Dropbox/Learn_Shiny_R/Lotka_volterra_Apps/App-1-Lotka_Volterra')
runApp('Dropbox/Learn_Shiny_R/Lotka_volterra_Apps/App-1-Lotka_Volterra')
runApp('Dropbox/Learn_Shiny_R/Lotka_volterra_Apps/App-1-Lotka_Volterra')
runApp('Dropbox/Learn_Shiny_R/Lotka_volterra_Apps/App-1-Lotka_Volterra')
runApp('Dropbox/Learn_Shiny_R/Lotka_volterra_Apps/App-1-Lotka_Volterra')
runApp('Dropbox/Learn_Shiny_R/Lotka_volterra_Apps/App-1-Lotka_Volterra')
runApp('Dropbox/Learn_Shiny_R/App-function_reader/function_reader_V2.R')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
library(shiny); runApp('Dropbox/Learn_Shiny_R/App-function_reader/function_reader_V2.R')
runApp('Dropbox/Learn_Shiny_R/App-function_reader/function_reader_V2.R')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
library(phaseR)
FHN <- function(t, y, parameters) {
I_0 <- parameters
dy <- numeric(2)
dy[1] <- 2 *  (y[2] + y[1] - 1/3 * y[1]^3) + I_0
dy[2] <- (1 - y[1] - y[2])/2
return(list(dy))
}
phasePlot <- function(FHN, I_0=-1){
FHN.flowField  <- flowField(FHN, x.lim = c(-3, 3),
y.lim = c(-3, 3),
xlab="v", ylab="w",
main=paste0("I=", I_0),
parameters = I_0,
points = 15, add = FALSE)
FHN.nullclines <- nullclines(FHN, x.lim = c(-3, 3),
y.lim = c(-3, 3),
parameters = I_0,
points = 500)
y0 <- matrix(c(-2, -2, 0, 0, 0.5, 0.5),
ncol = 2, nrow = 3,
byrow = TRUE)
FHN.trajectory <- trajectory(FHN, y0 = y0, t.end = 500,
parameters = I_0)
}
phasePlot(FHN , I_0 =1)
library(phaseR)
chemostat <- function(t, y, parameters) {
vm <- parameters[1]
km <- parameters[2]
Y  <- parameters[3]
D  <- parameters[4]
S0 <- parameters[5]
dy <- numeric(2)
mu  <- vm * y[2] / (km + y[2])
dy[1] <- mu * y[1] - D * y[1]
dy[2] <-  D *(S0 - y[2]) - 1/Y * mu * y[1]
return(list(dy))
}
p = c(
vm = 2,           # max growth rate, 1/d
km = 1,           # half saturation constant, mumol / L
Y  = 1,           # cells /mumol Substrate
D  = 1,           # dilution rate, 1/d
S0 = 3             # substrate in inflow, mumol / L
)
y_eq_1 <- c(p["Y"]*(p["S0"]-p["D"]*p["km"]/(p["vm"]-p["D"])),p["D"]*p["km"]/(p["vm"]-p["D"]))
y_eq_2 <- c(0,p["S0"])
phasePlot <- function(chemostat, parameters=p, y.star= y_eq_2){
chemostat.flowField  <- flowField(chemostat, x.lim = c(0, 20),
y.lim = c(0, 10),
xlab="X", ylab="S",
#main=paste0("I=", I_0),
parameters = p,
points = 15, add = FALSE)
chemostat.nullclines <- nullclines(chemostat, x.lim = c(0, 20),
y.lim = c(0, 10),
parameters = p,
points = 500,colour = c("blue", "red"))
y0 <- matrix(c(10, 10, 5, 8, 10, 0, 2, 0),
ncol = 2, nrow = 4,
byrow = TRUE)
chemostat.trajectory <- trajectory(chemostat, y0 = y0, t.end = 50,
parameters = p)
chemostat.stability <-stability(chemostat, y.star = y_eq_2, parameters = p)
}
phasePlot(chemostat,p)
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
vanDerPol.numericalSolution <- numericalSolution(vanDerPol, y0 = c(4, 2), t.end = 100,
parameters = 3)
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
verticalLayout(
a(href="http://example.com/link1", "Link One"),
a(href="http://example.com/link2", "Link Two"),
a(href="http://example.com/link3", "Link Three")
)
)
shinyApp(ui, server = function(input, output) { })
}
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
getAceThemes()
library(shinyAce)
getAceThemes()
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
shiny::runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
example2.phasePortrait <- phasePortrait(example2, y.lim = c(-0.5, 2.5), points = 10,
frac = 0.5)
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
library(deSolve)
library(plotly)
lotka_volterra_basic <- function(t, state, parameters){
with(as.list(c(state, parameters)),{
dx1 <- r1*x1 - c1*x1*x2
dx2 <- c2*x1*x2 - d2*x2
list(c(dx1,dx2))
})
}
state <- c(x1 = 5,
x2 = 5)
times <- seq(0, 100, by = 0.01)
parameters <- c(r1 =1, c1 = 0.3, c2 = 0.1, d2= 0.7)
#out <- as.data.frame(ode(y = state, times = times, func = lotka_volterra_basic, parms = parameters))
while(TRUE)
{
souris <- locator(1)
PRdata <- as.data.frame(ode(func = lotka_volterra_basic, y = c(x1 = souris$x, x2 = souris$y),
parms = parameters, times = times))
points(PRdata[,2], PRdata[,3], type = "l", col ="green", lwd = 1)
}
library(deSolve)
library(plotly)
lotka_volterra_basic <- function(t, state, parameters){
with(as.list(c(state, parameters)),{
dx1 <- r1*x1 - c1*x1*x2
dx2 <- c2*x1*x2 - d2*x2
list(c(dx1,dx2))
})
}
state <- c(x1 = 5,
x2 = 5)
times <- seq(0, 100, by = 0.01)
parameters <- c(r1 =1, c1 = 0.3, c2 = 0.1, d2= 0.7)
#out <- as.data.frame(ode(y = state, times = times, func = lotka_volterra_basic, parms = parameters))
while(TRUE)
{
souris <- locator(1)
PRdata <- as.data.frame(ode(func = lotka_volterra_basic, y = c(x1 = souris$x, x2 = souris$y),
parms = parameters, times = times))
points(PRdata[,2], PRdata[,3], type = "l", col ="green", lwd = 1)
}
library(deSolve)
library(plotly)
lotka_volterra_basic <- function(t, state, parameters){
with(as.list(c(state, parameters)),{
dx1 <- r1*x1 - c1*x1*x2
dx2 <- c2*x1*x2 - d2*x2
list(c(dx1,dx2))
})
}
state <- c(x1 = 5,
x2 = 5)
times <- seq(0, 100, by = 0.01)
parameters <- c(r1 =1, c1 = 0.3, c2 = 0.1, d2= 0.7)
#out <- as.data.frame(ode(y = state, times = times, func = lotka_volterra_basic, parms = parameters))
while(TRUE)
{
souris <- locator(1)
PRdata <- as.data.frame(ode(func = lotka_volterra_basic, y = c(x1 = souris$x, x2 = souris$y),
parms = parameters, times = times))
plot(PRdata[,2], PRdata[,3], type = "l", col ="green", lwd = 1)
}
library(deSolve)
library(plotly)
lotka_volterra_basic <- function(t, state, parameters){
with(as.list(c(state, parameters)),{
dx1 <- r1*x1 - c1*x1*x2
dx2 <- c2*x1*x2 - d2*x2
list(c(dx1,dx2))
})
}
state <- c(x1 = 5,
x2 = 5)
times <- seq(0, 100, by = 0.01)
parameters <- c(r1 =1, c1 = 0.3, c2 = 0.1, d2= 0.7)
#out <- as.data.frame(ode(y = state, times = times, func = lotka_volterra_basic, parms = parameters))
plot.new
while(TRUE)
{
souris <- locator(1)
PRdata <- as.data.frame(ode(func = lotka_volterra_basic, y = c(x1 = souris$x, x2 = souris$y),
parms = parameters, times = times))
points(PRdata[,2], PRdata[,3], type = "l", col ="green", lwd = 1)
}
library(deSolve)
library(plotly)
lotka_volterra_basic <- function(t, state, parameters){
with(as.list(c(state, parameters)),{
dx1 <- r1*x1 - c1*x1*x2
dx2 <- c2*x1*x2 - d2*x2
list(c(dx1,dx2))
})
}
state <- c(x1 = 5,
x2 = 5)
times <- seq(0, 100, by = 0.01)
parameters <- c(r1 =1, c1 = 0.3, c2 = 0.1, d2= 0.7)
#out <- as.data.frame(ode(y = state, times = times, func = lotka_volterra_basic, parms = parameters))
plot()
while(TRUE)
{
souris <- locator(1)
PRdata <- as.data.frame(ode(func = lotka_volterra_basic, y = c(x1 = souris$x, x2 = souris$y),
parms = parameters, times = times))
points(PRdata[,2], PRdata[,3], type = "l", col ="green", lwd = 1)
}
library(deSolve)
library(plotly)
lotka_volterra_basic <- function(t, state, parameters){
with(as.list(c(state, parameters)),{
dx1 <- r1*x1 - c1*x1*x2
dx2 <- c2*x1*x2 - d2*x2
list(c(dx1,dx2))
})
}
state <- c(x1 = 5,
x2 = 5)
times <- seq(0, 100, by = 0.01)
parameters <- c(r1 =1, c1 = 0.3, c2 = 0.1, d2= 0.7)
#out <- as.data.frame(ode(y = state, times = times, func = lotka_volterra_basic, parms = parameters))
plot.new()
while(TRUE)
{
souris <- locator(1)
PRdata <- as.data.frame(ode(func = lotka_volterra_basic, y = c(x1 = souris$x, x2 = souris$y),
parms = parameters, times = times))
points(PRdata[,2], PRdata[,3], type = "l", col ="green", lwd = 1)
}
library(deSolve)
library(plotly)
lotka_volterra_basic <- function(t, state, parameters){
with(as.list(c(state, parameters)),{
dx1 <- r1*x1 - c1*x1*x2
dx2 <- c2*x1*x2 - d2*x2
list(c(dx1,dx2))
})
}
state <- c(x1 = 5,
x2 = 5)
times <- seq(0, 100, by = 0.01)
parameters <- c(r1 =1, c1 = 0.3, c2 = 0.1, d2= 0.7)
#out <- as.data.frame(ode(y = state, times = times, func = lotka_volterra_basic, parms = parameters))
plot.new()
while(TRUE)
{
souris <- locator(1)
PRdata <- as.data.frame(ode(func = lotka_volterra_basic, y = c(x1 = souris$x, x2 = souris$y),
parms = parameters, times = times))
points(PRdata[,2], PRdata[,3], type = "l", col ="green", lwd = 1)
}
library(deSolve)
library(plotly)
lotka_volterra_basic <- function(t, state, parameters){
with(as.list(c(state, parameters)),{
dx1 <- r1*x1 - c1*x1*x2
dx2 <- c2*x1*x2 - d2*x2
list(c(dx1,dx2))
})
}
state <- c(x1 = 5,
x2 = 5)
times <- seq(0, 100, by = 0.01)
parameters <- c(r1 =1, c1 = 0.3, c2 = 0.1, d2= 0.7)
out <- as.data.frame(ode(y = state, times = times, func = lotka_volterra_basic, parms = parameters))
plot(out[,2], out[,3])
while(TRUE)
{
souris <- locator(1)
PRdata <- as.data.frame(ode(func = lotka_volterra_basic, y = c(x1 = souris$x, x2 = souris$y),
parms = parameters, times = times))
points(PRdata[,2], PRdata[,3], type = "l", col ="green", lwd = 1)
}
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
data(iris)
require(shiny)
sepal.length <- sapply(unique(iris$Species),function(s){ iris[which(iris$Species==s),"Sepal.Length"] })
data         <- data.frame("mean"=apply(sepal.length,2,mean),"sd"=apply(sepal.length,2,sd),"species"=unique(iris$Species))
server <- shinyServer(function(input, output, session) {
# Save plot in reactive
plot.dat <- reactiveValues(main=NULL, layer1=NULL)
plot.dat$main <- ggplot(data=data,aes(x=species,y=mean,fill=species)) +
geom_bar(stat="identity")
observe({
print("render")
output$plot <- renderPlot({ plot.dat$main + plot.dat$layer1 })
})
observeEvent(input$add_bars,{
# Calculate standard deviation
plot.dat$layer1 <- geom_errorbar(aes(ymin=mean-sd,ymax=mean+sd))
})
})
ui <- shinyUI(fluidPage(
plotOutput("plot"),
actionButton("add_bars","Add error bars")
))
shinyApp(ui = ui, server = server)
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
library(shiny)
library(ggplot2)
var_list <- c("x","y","z")
analy_fun <- c("sin","cos","exp")
u <- shinyUI(fluidPage(
titlePanel("Test ClickInfo"),
sidebarLayout(
sidebarPanel(
selectInput("variable", "variable:", var_list),
selectInput("analy_fun", "Analytic Function:", analy_fun)),
mainPanel(
fluidRow(
column(width = 4,plotOutput("plot", height=350, click=clickOpts(id="plot_click"))
),
fluidRow(
column(width = 6, verbatimTextOutput("click_info"))
))))))
s <- function(input, output) {
gendata <- reactive({
df <- expand.grid(x=-4:4,y=-4:4,z=-4:4)
df$sin <- sin(df$x+df$y+df$z)
df$cos <- cos(df$x+df$y+df$z)
df$exp <- exp(df$x+df$y+df$z)
df
})
output$plot <- renderPlot({
ggplot(gendata()) + geom_point(aes_string(x=input$variable,y=input$analy_fun))
})
output$click_info <- renderText({
sprintf(" %s = %.2f \n %s = %.2f ",input$variable,  input$plot_click$x,
input$analy_fun, input$plot_click$y )
})
}
shinyApp(u, s)
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
library(shiny)
ui <- fluidPage(
h1("Plot click demo"),
plotOutput("plot", clickId = "plot_click"),
actionButton("reset", "Reset zoom")
)
server <- function(input, output, session) {
v <- reactiveValues(
click1 = NULL,  # Represents the first mouse click, if any
range = NULL    # After two clicks, this stores the range of x
)
# Handle clicks on the plot
observeEvent(input$plot_click, {
if (is.null(v$click1)) {
# We don't have a first click, so this is the first click
v$click1 <- input$plot_click
} else {
# We already had a first click, so this is the second click.
# Make a range from the previous click and this one.
v$range <- range(v$click1$x, input$plot_click$x)
# And clear the first click so the next click starts a new
# range.
v$click1 <- NULL
}
})
observeEvent(input$reset, {
# Reset both the range and the first click, if any.
v$range <- NULL
v$click1 <- NULL
})
output$plot <- renderPlot({
plot(cars, xlim = v$range)
if (!is.null(v$click1$x))
abline(v = v$click1$x)
})
}
shinyApp(ui, server)
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
runApp('Dropbox/Learn_Shiny_R/App-function_reader')
setwd("~/Documents/blogdown_sources")
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
install.packages(c("devtools", "dplyr", "EpiModel", "GGally", "jsonlite", "mapproj", "maps"))
